"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/utils.ts":
/*!**********************!*\
  !*** ./lib/utils.ts ***!
  \**********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cn: () => (/* binding */ cn),\n/* harmony export */   formatCurrency: () => (/* binding */ formatPrice),\n/* harmony export */   formatPrice: () => (/* binding */ formatPrice),\n/* harmony export */   parsePriceToManwon: () => (/* binding */ parsePriceToManwon)\n/* harmony export */ });\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! clsx */ \"(app-pages-browser)/./node_modules/.pnpm/clsx@2.1.1/node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var tailwind_merge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tailwind-merge */ \"(app-pages-browser)/./node_modules/.pnpm/tailwind-merge@2.6.0/node_modules/tailwind-merge/dist/bundle-mjs.mjs\");\n\n\nfunction cn() {\n    for(var _len = arguments.length, inputs = new Array(_len), _key = 0; _key < _len; _key++){\n        inputs[_key] = arguments[_key];\n    }\n    return (0,tailwind_merge__WEBPACK_IMPORTED_MODULE_1__.twMerge)((0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(inputs));\n}\n/**\n * 네이버 부동산 API 등에서 오는 가격 문자열 (예: \"10억\", \"2억 5,000\", \"5000\")을\n * 숫자형 만원 단위로 변환합니다.\n * @param priceStr 가격 문자열\n * @returns 만원 단위의 숫자. 변환 실패 시 null 반환.\n */ function parsePriceToManwon(priceStr) {\n    if (!priceStr || typeof priceStr !== 'string') {\n        return null;\n    }\n    let num = 0;\n    const cleanedPriceStr = priceStr.replace(/,/g, '').trim();\n    if (cleanedPriceStr.includes('억')) {\n        const parts = cleanedPriceStr.split('억');\n        num += parseFloat(parts[0]) * 10000;\n        if (parts[1] && parts[1].trim() !== '') {\n            num += parseFloat(parts[1].replace('만', '').trim()) || 0;\n        }\n    } else if (cleanedPriceStr.includes('만')) {\n        num += parseFloat(cleanedPriceStr.replace('만', '').trim());\n    } else {\n        // 단위가 없는 경우, 숫자 자체를 만원 단위로 간주 (API 명세 확인 필요)\n        // 또는 원 단위일 수 있으므로, API 응답의 실제 단위를 확인해야 함.\n        // 현재는 사용자가 만원 단위라고 가정했으므로, 그대로 숫자로 변환.\n        const parsed = parseFloat(cleanedPriceStr);\n        if (!isNaN(parsed)) {\n            num = parsed;\n        }\n    }\n    return isNaN(num) || num === 0 ? null : num;\n}\nfunction formatPrice(price) {\n    if (price === null || price === undefined || price === \"\" || price === \"0\") {\n        // 0도 명시적으로 처리 (API에서 문자열 \"0\"으로 올 수 있음)\n        return \"-\";\n    }\n    let priceNum;\n    if (typeof price === 'string') {\n        // 문자열에서 콤마 제거 후 숫자로 변환\n        priceNum = parseInt(price.replace(/,/g, \"\"), 10);\n    } else {\n        // 이미 숫자인 경우\n        priceNum = price;\n    }\n    // 변환 후에도 유효한 숫자인지, 그리고 0인지 확인\n    if (isNaN(priceNum) || priceNum === 0) {\n        return \"-\";\n    }\n    // 네이버 부동산 API는 가격을 정수형 원 단위로 반환하는 경우가 많음 (예: 150000000 -> 1억 5천만원)\n    // 또는 만원 단위로 필터링하여 만원 단위로 내려올 수도 있음 (예: priceMin=5000 -> 5000만원)\n    // 여기서는 입력된 priceNum이 '원' 단위라고 가정하고 만원 단위로 먼저 변환합니다.\n    // 만약 API 응답이 이미 '만원' 단위라면 이 변환은 필요 없습니다.\n    // 주석 처리: const priceInManwon = Math.floor(priceNum / 10000); // 원 단위를 만원 단위로\n    // 우선은 입력값이 '만원' 단위라고 가정하고 진행합니다. (API 응답을 정확히 확인 필요)\n    const valueInManwon = priceNum; // 입력값이 이미 만원 단위라고 가정\n    const eok = Math.floor(valueInManwon / 10000);\n    const man = valueInManwon % 10000;\n    let result = \"\";\n    if (eok > 0) {\n        result += \"\".concat(eok, \"억\");\n    }\n    if (man > 0) {\n        if (eok > 0) {\n            result += \" \"; // 억과 만 사이에 공백\n        }\n        // 1,000단위 콤마 추가\n        result += \"\".concat(man.toLocaleString(), \"만\");\n    }\n    // eok만 있고 man이 0일 경우 (예: 50000 입력 -> 5억)\n    if (eok > 0 && man === 0) {\n    // 이미 result에 \"X억\"이 담겨있음. 추가 작업 불필요\n    } else if (eok === 0 && man > 0) {\n    // 이미 result에 \"X만\"이 담겨있음. 추가 작업 불필요\n    } else if (result === \"\") {\n        // 이 경우는 위쪽의 isNaN(priceNum) || priceNum === 0 에서 처리되어야 함.\n        // 혹시 모를 예외를 위해, 원본 숫자를 만원 단위로 표시\n        if (valueInManwon > 0) return \"\".concat(valueInManwon.toLocaleString(), \"만\");\n        return \"-\"; // 그래도 이상하면 \"-\"\n    }\n    return result;\n}\n// formatPrice 함수의 별칭으로 formatCurrency 사용\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/utils.ts\n"));

/***/ })

});